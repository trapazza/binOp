[ROOT] ->  [0:0]
  [lineComment] -> // quotes [0:11]

  [def] -> sq = "'" [11:8]
    [ident] -> sq [11:2]
    [expr] -> "'" [16:3]
      [str] -> ' [17:1]

  [def] -> dq = '"' [21:8]
    [ident] -> dq [21:2]
    [expr] -> '"' [26:3]
      [char] -> " [27:1]

  [lineComment] -> // single line and block comment delimiters [33:45]

  [def] -> slc = "//" [78:10]
    [ident] -> slc [78:3]
    [expr] -> "//" [84:4]
      [str] -> // [85:2]

  [def] -> bcs = "/*" [90:10]
    [ident] -> bcs [90:3]
    [expr] -> "/*" [96:4]
      [str] -> /* [97:2]

  [def] -> bce = "*/" [102:10]
    [ident] -> bce [102:3]
    [expr] -> "*/" [108:4]
      [str] -> */ [109:2]

  [lineComment] -> // left/right parenthesis/brackets [116:36]

  [def] -> lp = '(' s [152:10]
    [ident] -> lp [152:2]
    [expr] -> '(' s [157:5]
      [sequence] -> '(' s [157:5]
        [char] -> ( [158:1]
        [ident] -> s [161:1]

  [def] -> rp = ')' s [164:10]
    [ident] -> rp [164:2]
    [expr] -> ')' s [169:5]
      [sequence] -> ')' s [169:5]
        [char] -> ) [170:1]
        [ident] -> s [173:1]

  [lineComment] -> // symbol and ast operators [178:29]

  [def] -> defOp  = '=' s [207:14]
    [ident] -> defOp [207:5]
    [expr] -> '=' s [216:5]
      [sequence] -> '=' s [216:5]
        [char] -> = [217:1]
        [ident] -> s [220:1]

  [def] -> prdOp  = "=>" s [223:15]
    [ident] -> prdOp [223:5]
    [expr] -> "=>" s [232:6]
      [sequence] -> "=>" s [232:6]
        [str] -> => [233:2]
        [ident] -> s [237:1]

  [def] -> astOp  = '^' s [240:14]
    [ident] -> astOp [240:5]
    [expr] -> '^' s [249:5]
      [sequence] -> '^' s [249:5]
        [char] -> ^ [250:1]
        [ident] -> s [253:1]

  [def] -> muteOp = '~' s [256:14]
    [ident] -> muteOp [256:6]
    [expr] -> '~' s [265:5]
      [sequence] -> '~' s [265:5]
        [char] -> ~ [266:1]
        [ident] -> s [269:1]

  [lineComment] -> // operator symbols [274:21]

  [def] -> orOp  = [|/] s [295:14]
    [ident] -> orOp [295:4]
    [expr] -> [|/] s [303:6]
      [sequence] -> [|/] s [303:6]
        [charset] -> [|/] [303:4]
          [char] -> | [304:1]
          [char] -> / [305:1]
        [ident] -> s [308:1]

  [def] -> optOp = '?' s [311:13]
    [ident] -> optOp [311:5]
    [expr] -> '?' s [319:5]
      [sequence] -> '?' s [319:5]
        [char] -> ? [320:1]
        [ident] -> s [323:1]

  [def] -> zplOp = '*' s [326:13]
    [ident] -> zplOp [326:5]
    [expr] -> '*' s [334:5]
      [sequence] -> '*' s [334:5]
        [char] -> * [335:1]
        [ident] -> s [338:1]

  [def] -> oplOp = '+' s [341:13]
    [ident] -> oplOp [341:5]
    [expr] -> '+' s [349:5]
      [sequence] -> '+' s [349:5]
        [char] -> + [350:1]
        [ident] -> s [353:1]

  [def] -> andOp = '&' s [356:13]
    [ident] -> andOp [356:5]
    [expr] -> '&' s [364:5]
      [sequence] -> '&' s [364:5]
        [char] -> & [365:1]
        [ident] -> s [368:1]

  [def] -> notOp = '!' s [371:13]
    [ident] -> notOp [371:5]
    [expr] -> '!' s [379:5]
      [sequence] -> '!' s [379:5]
        [char] -> ! [380:1]
        [ident] -> s [383:1]

  [lineComment] -> // space [388:10]

  [def] -> s  = ([ \t] | blockComment)* [398:28]
    [ident] -> s [398:1]
    [expr] -> ([ \t] | blockComment)* [403:23]
      [zpl] -> ([ \t] | blockComment)* [403:23]
        [choice] -> [ \t] | blockComment [404:20]
          [charset] -> [ \t] [404:5]
            [char] ->   [405:1]
            [char] -> \t [406:2]
          [ident] -> blockComment [412:12]

  [def] -> ws = ([ \t\r\n] | comment)* [428:27]
    [ident] -> ws [428:2]
    [expr] -> ([ \t\r\n] | comment)* [433:22]
      [zpl] -> ([ \t\r\n] | comment)* [433:22]
        [choice] -> [ \t\r\n] | comment [434:19]
          [charset] -> [ \t\r\n] [434:9]
            [char] ->   [435:1]
            [char] -> \t [436:2]
            [char] -> \r [438:2]
            [char] -> \n [440:2]
          [ident] -> comment [446:7]

  [lineComment] -> // end markers [459:16]

  [def] -> eol = "\r\n" | [\n\r] [475:21]
    [ident] -> eol [475:3]
    [expr] -> "\r\n" | [\n\r] [481:15]
      [choice] -> "\r\n" | [\n\r] [481:15]
        [str] -> \r\n [482:4]
        [charset] -> [\n\r] [490:6]
          [char] -> \n [491:2]
          [char] -> \r [493:2]

  [def] -> eos = (^lineComment | eol | !.) [498:31]
    [ident] -> eos [498:3]
    [expr] -> (^lineComment | eol | !.) [504:25]
      [choice] -> ^lineComment | eol | !. [505:23]
        [ast] -> ^lineComment  [505:13]
          [ident] -> lineComment [506:11]
        [ident] -> eol [520:3]
        [not] -> !. [526:2]
          [anyChar] -> . [527:1]

  [lineComment] -> // comments [533:13]

  [def] -> lineComment  = slc (!eol.)* eol [546:31]
    [ident] -> lineComment [546:11]
    [expr] -> slc (!eol.)* eol [561:16]
      [sequence] -> slc (!eol.)* eol [561:16]
        [ident] -> slc [561:3]
        [zpl] -> (!eol.)*  [565:9]
          [sequence] -> !eol. [566:5]
            [not] -> !eol [566:4]
              [ident] -> eol [567:3]
            [anyChar] -> . [570:1]
        [ident] -> eol [574:3]

  [def] -> blockComment = bcs (!bce.)* bce [579:31]
    [ident] -> blockComment [579:12]
    [expr] -> bcs (!bce.)* bce [594:16]
      [sequence] -> bcs (!bce.)* bce [594:16]
        [ident] -> bcs [594:3]
        [zpl] -> (!bce.)*  [598:9]
          [sequence] -> !bce. [599:5]
            [not] -> !bce [599:4]
              [ident] -> bce [600:3]
            [anyChar] -> . [603:1]
        [ident] -> bce [607:3]

  [def] -> comment      = ^lineComment | ^blockComment [612:43]
    [ident] -> comment [612:7]
    [expr] -> ^lineComment | ^blockComment [627:28]
      [choice] -> ^lineComment | ^blockComment [627:28]
        [ast] -> ^lineComment  [627:13]
          [ident] -> lineComment [628:11]
        [ast] -> ^blockComment [642:13]
          [ident] -> blockComment [643:12]

  [lineComment] -> // define typical digit and letter ranges [659:43]

  [def] -> digit      = [0-9] [702:18]
    [ident] -> digit [702:5]
    [expr] -> [0-9] [715:5]
      [charset] -> [0-9] [715:5]
        [range] -> 0-9 [716:3]
          [char] -> 0 [716:1]
          [char] -> 9 [718:1]

  [def] -> letter     = [a-zA-Z] [722:21]
    [ident] -> letter [722:6]
    [expr] -> [a-zA-Z] [735:8]
      [charset] -> [a-zA-Z] [735:8]
        [range] -> a-z [736:3]
          [char] -> a [736:1]
          [char] -> z [738:1]
        [range] -> A-Z [739:3]
          [char] -> A [739:1]
          [char] -> Z [741:1]

  [lineComment] -> // range of valid input characters (ascii 32 to 126 both included plus tabs and line breaks) [747:94]

  [def] -> ascii = [ -~\t\n] [841:17]
    [ident] -> ascii [841:5]
    [expr] -> [ -~\t\n] [849:9]
      [charset] -> [ -~\t\n] [849:9]
        [range] ->  -~ [850:3]
          [char] ->   [850:1]
          [char] -> ~ [852:1]
        [char] -> \t [853:2]
        [char] -> \n [855:2]

  [lineComment] -> // literal  numbers string and characters [862:43]

  [def] -> escaped    = '\\' [0abfnrtv\\\"\'] [905:34]
    [ident] -> escaped [905:7]
    [expr] -> '\\' [0abfnrtv\\\"\'] [918:21]
      [sequence] -> '\\' [0abfnrtv\\\"\'] [918:21]
        [char] -> \\ [919:2]
        [charset] -> [0abfnrtv\\\"\'] [923:16]
          [char] -> 0 [924:1]
          [char] -> a [925:1]
          [char] -> b [926:1]
          [char] -> f [927:1]
          [char] -> n [928:1]
          [char] -> r [929:1]
          [char] -> t [930:1]
          [char] -> v [931:1]
          [char] -> \\ [932:2]
          [char] -> \" [934:2]
          [char] -> \' [936:2]

  [def] -> char       = (escaped | ascii) [941:30]
    [ident] -> char [941:4]
    [expr] -> (escaped | ascii) [954:17]
      [choice] -> escaped | ascii [955:15]
        [ident] -> escaped [955:7]
        [ident] -> ascii [965:5]

  [def] -> str        = (!dq.)* [973:20]
    [ident] -> str [973:3]
    [expr] -> (!dq.)* [986:7]
      [zpl] -> (!dq.)* [986:7]
        [sequence] -> !dq. [987:4]
          [not] -> !dq [987:3]
            [ident] -> dq [988:2]
          [anyChar] -> . [990:1]

  [def] -> litChar    = sq ^char sq [995:24]
    [ident] -> litChar [995:7]
    [expr] -> sq ^char sq [1008:11]
      [sequence] -> sq ^char sq [1008:11]
        [ident] -> sq [1008:2]
        [ast] -> ^char  [1011:6]
          [ident] -> char [1012:4]
        [ident] -> sq [1017:2]

  [def] -> litStr     = dq ^str dq [1021:23]
    [ident] -> litStr [1021:6]
    [expr] -> dq ^str dq [1034:10]
      [sequence] -> dq ^str dq [1034:10]
        [ident] -> dq [1034:2]
        [ast] -> ^str  [1037:5]
          [ident] -> str [1038:3]
        [ident] -> dq [1042:2]

  [def] -> number     = digit+ !letter [1046:27]
    [ident] -> number [1046:6]
    [expr] -> digit+ !letter [1059:14]
      [sequence] -> digit+ !letter [1059:14]
        [opl] -> digit+  [1059:7]
          [ident] -> digit [1059:5]
        [not] -> !letter [1066:7]
          [ident] -> letter [1067:6]

  [def] -> literal    = ^number | litChar | litStr [1075:39]
    [ident] -> literal [1075:7]
    [expr] -> ^number | litChar | litStr [1088:26]
      [choice] -> ^number | litChar | litStr [1088:26]
        [ast] -> ^number  [1088:8]
          [ident] -> number [1089:6]
        [ident] -> litChar [1098:7]
        [ident] -> litStr [1108:6]

  [lineComment] -> // identifiers [1118:16]

  [def] -> idFirstChar = letter | '_' [1134:26]
    [ident] -> idFirstChar [1134:11]
    [expr] -> letter | '_' [1148:12]
      [choice] -> letter | '_' [1148:12]
        [ident] -> letter [1148:6]
        [char] -> _ [1158:1]

  [def] -> idNextChar  = idFirstChar | digit [1162:33]
    [ident] -> idNextChar [1162:10]
    [expr] -> idFirstChar | digit [1176:19]
      [choice] -> idFirstChar | digit [1176:19]
        [ident] -> idFirstChar [1176:11]
        [ident] -> digit [1190:5]

  [def] -> ident       = idFirstChar idNextChar* [1197:37]
    [ident] -> ident [1197:5]
    [expr] -> idFirstChar idNextChar* [1211:23]
      [sequence] -> idFirstChar idNextChar* [1211:23]
        [ident] -> idFirstChar [1211:11]
        [zpl] -> idNextChar* [1223:11]
          [ident] -> idNextChar [1223:10]

  [lineComment] -> // basic expressions [1240:22]

  [def] -> anyChar     = '.' [1262:17]
    [ident] -> anyChar [1262:7]
    [expr] -> '.' [1276:3]
      [char] -> . [1277:1]

  [def] -> range       = ^char '-' ^char [1281:29]
    [ident] -> range [1281:5]
    [expr] -> ^char '-' ^char [1295:15]
      [sequence] -> ^char '-' ^char [1295:15]
        [ast] -> ^char  [1295:6]
          [ident] -> char [1296:4]
        [char] -> - [1302:1]
        [ast] -> ^char [1305:5]
          [ident] -> char [1306:4]

  [def] -> charset     = '[' (!']' (^range | ^char))* ']' [1312:46]
    [ident] -> charset [1312:7]
    [expr] -> '[' (!']' (^range | ^char))* ']' [1326:32]
      [sequence] -> '[' (!']' (^range | ^char))* ']' [1326:32]
        [char] -> [ [1327:1]
        [zpl] -> (!']' (^range | ^char))*  [1330:25]
          [sequence] -> !']' (^range | ^char) [1331:21]
            [not] -> !']'  [1331:5]
              [char] -> ] [1333:1]
            [choice] -> ^range | ^char [1337:14]
              [ast] -> ^range  [1337:7]
                [ident] -> range [1338:5]
              [ast] -> ^char [1346:5]
                [ident] -> char [1347:4]
        [char] -> ] [1356:1]

  [lineComment] -> // charset [1362:12]

  [def] -> subExpr = lp expr rp [1374:20]
    [ident] -> subExpr [1374:7]
    [expr] -> lp expr rp [1384:10]
      [sequence] -> lp expr rp [1384:10]
        [ident] -> lp [1384:2]
        [ident] -> expr [1387:4]
        [ident] -> rp [1392:2]

  [lineComment] -> // special commands [1398:21]

  [def] -> command = ~'-' ("stop" | "brk") ~s [1419:34]
    [ident] -> command [1419:7]
    [expr] -> ~'-' ("stop" | "brk") ~s [1429:24]
      [sequence] -> ~'-' ("stop" | "brk") ~s [1429:24]
        [mute] -> ~'-'  [1429:5]
          [char] -> - [1431:1]
        [choice] -> "stop" | "brk" [1435:14]
          [str] -> stop [1436:4]
          [str] -> brk [1445:3]
        [mute] -> ~s [1451:2]
          [ident] -> s [1452:1]

  [lineComment] -> // special functions [1457:22]

  [def] -> funcName = "brk" | "color" [1479:26]
    [ident] -> funcName [1479:8]
    [expr] -> "brk" | "color" [1490:15]
      [choice] -> "brk" | "color" [1490:15]
        [str] -> brk [1491:3]
        [str] -> color [1499:5]

  [def] -> funcArg = literal [1509:17]
    [ident] -> funcArg [1509:7]
    [expr] -> literal [1519:7]
      [ident] -> literal [1519:7]

  [def] -> argList = funcArg? (',' s funcArg)* s [1528:37]
    [ident] -> argList [1528:7]
    [expr] -> funcArg? (',' s funcArg)* s [1538:27]
      [sequence] -> funcArg? (',' s funcArg)* s [1538:27]
        [opt] -> funcArg?  [1538:9]
          [ident] -> funcArg [1538:7]
        [zpl] -> (',' s funcArg)*  [1547:17]
          [sequence] -> ',' s funcArg [1548:13]
            [char] -> , [1549:1]
            [ident] -> s [1552:1]
            [ident] -> funcArg [1554:7]
        [ident] -> s [1564:1]

  [def] -> func = ^funcName s lp expr (',' s)? ^argList rp [1567:47]
    [ident] -> func [1567:4]
    [expr] -> ^funcName s lp expr (',' s)? ^argList rp [1574:40]
      [sequence] -> ^funcName s lp expr (',' s)? ^argList rp [1574:40]
        [ast] -> ^funcName  [1574:10]
          [ident] -> funcName [1575:8]
        [ident] -> s [1584:1]
        [ident] -> lp [1586:2]
        [ident] -> expr [1589:4]
        [opt] -> (',' s)?  [1594:9]
          [sequence] -> ',' s [1595:5]
            [char] -> , [1596:1]
            [ident] -> s [1599:1]
        [ast] -> ^argList  [1603:9]
          [ident] -> argList [1604:7]
        [ident] -> rp [1612:2]

  [def] -> primary = (subExpr | ^func | ^command | ^charset | literal | ^ident | ^anyChar) s [1618:81]
    [ident] -> primary [1618:7]
    [expr] -> (subExpr | ^func | ^command | ^charset | literal | ^ident | ^anyChar) s [1628:71]
      [sequence] -> (subExpr | ^func | ^command | ^charset | literal | ^ident | ^anyChar) s [1628:71]
        [choice] -> subExpr | ^func | ^command | ^charset | literal | ^ident | ^anyChar [1629:67]
          [ident] -> subExpr [1629:7]
          [ast] -> ^func  [1639:6]
            [ident] -> func [1640:4]
          [ast] -> ^command  [1647:9]
            [ident] -> command [1648:7]
          [ast] -> ^charset  [1658:9]
            [ident] -> charset [1659:7]
          [ident] -> literal [1669:7]
          [ast] -> ^ident  [1679:7]
            [ident] -> ident [1680:5]
          [ast] -> ^anyChar [1688:8]
            [ident] -> anyChar [1689:7]
        [ident] -> s [1698:1]

  [lineComment] -> // suffixed expressions [1703:25]

  [def] -> opt        = primary optOp [1728:26]
    [ident] -> opt [1728:3]
    [expr] -> primary optOp [1741:13]
      [sequence] -> primary optOp [1741:13]
        [ident] -> primary [1741:7]
        [ident] -> optOp [1749:5]

  [def] -> zpl        = primary zplOp [1756:26]
    [ident] -> zpl [1756:3]
    [expr] -> primary zplOp [1769:13]
      [sequence] -> primary zplOp [1769:13]
        [ident] -> primary [1769:7]
        [ident] -> zplOp [1777:5]

  [def] -> opl        = primary oplOp [1784:26]
    [ident] -> opl [1784:3]
    [expr] -> primary oplOp [1797:13]
      [sequence] -> primary oplOp [1797:13]
        [ident] -> primary [1797:7]
        [ident] -> oplOp [1805:5]

  [def] -> suffixExpr = ^opl | ^zpl | ^opt | primary [1812:41]
    [ident] -> suffixExpr [1812:10]
    [expr] -> ^opl | ^zpl | ^opt | primary [1825:28]
      [choice] -> ^opl | ^zpl | ^opt | primary [1825:28]
        [ast] -> ^opl  [1825:5]
          [ident] -> opl [1826:3]
        [ast] -> ^zpl  [1832:5]
          [ident] -> zpl [1833:3]
        [ast] -> ^opt  [1839:5]
          [ident] -> opt [1840:3]
        [ident] -> primary [1846:7]

  [lineComment] -> // prefixed expressions [1857:25]

  [def] -> and        = andOp suffixExpr [1882:29]
    [ident] -> and [1882:3]
    [expr] -> andOp suffixExpr [1895:16]
      [sequence] -> andOp suffixExpr [1895:16]
        [ident] -> andOp [1895:5]
        [ident] -> suffixExpr [1901:10]

  [def] -> not        = notOp suffixExpr [1913:29]
    [ident] -> not [1913:3]
    [expr] -> notOp suffixExpr [1926:16]
      [sequence] -> notOp suffixExpr [1926:16]
        [ident] -> notOp [1926:5]
        [ident] -> suffixExpr [1932:10]

  [def] -> ast        = astOp suffixExpr [1944:29]
    [ident] -> ast [1944:3]
    [expr] -> astOp suffixExpr [1957:16]
      [sequence] -> astOp suffixExpr [1957:16]
        [ident] -> astOp [1957:5]
        [ident] -> suffixExpr [1963:10]

  [def] -> mute       = muteOp suffixExpr [1975:30]
    [ident] -> mute [1975:4]
    [expr] -> muteOp suffixExpr [1988:17]
      [sequence] -> muteOp suffixExpr [1988:17]
        [ident] -> muteOp [1988:6]
        [ident] -> suffixExpr [1995:10]

  [def] -> prefixExpr = ^ast | ^mute | ^and | ^not | suffixExpr [2007:52]
    [ident] -> prefixExpr [2007:10]
    [expr] -> ^ast | ^mute | ^and | ^not | suffixExpr [2020:39]
      [choice] -> ^ast | ^mute | ^and | ^not | suffixExpr [2020:39]
        [ast] -> ^ast  [2020:5]
          [ident] -> ast [2021:3]
        [ast] -> ^mute  [2027:6]
          [ident] -> mute [2028:4]
        [ast] -> ^and  [2035:5]
          [ident] -> and [2036:3]
        [ast] -> ^not  [2042:5]
          [ident] -> not [2043:3]
        [ident] -> suffixExpr [2049:10]

  [lineComment] -> //sequence   = prefixExpr+ [2063:28]

  [lineComment] -> //choice     = ^sequence (orOp ^sequence)* [2091:44]

  [prd] -> sequence     => prefixExpr+ [2135:27]
    [ident] -> sequence [2135:8]
    [expr] -> prefixExpr+ [2151:11]
      [opl] -> prefixExpr+ [2151:11]
        [ident] -> prefixExpr [2151:10]

  [prd] -> choice       => sequence (orOp sequence)* [2164:41]
    [ident] -> choice [2164:6]
    [expr] -> sequence (orOp sequence)* [2180:25]
      [sequence] -> sequence (orOp sequence)* [2180:25]
        [ident] -> sequence [2180:8]
        [zpl] -> (orOp sequence)* [2189:16]
          [sequence] -> orOp sequence [2190:13]
            [ident] -> orOp [2190:4]
            [ident] -> sequence [2195:8]

  [def] -> expr         = choice [2207:21]
    [ident] -> expr [2207:4]
    [expr] -> choice [2222:6]
      [ident] -> choice [2222:6]

  [lineComment] -> // statements can be either symbols or AST nodes [2232:50]

  [def] -> def = ^ident s defOp ^expr [2282:26]
    [ident] -> def [2282:3]
    [expr] -> ^ident s defOp ^expr [2288:20]
      [sequence] -> ^ident s defOp ^expr [2288:20]
        [ast] -> ^ident  [2288:7]
          [ident] -> ident [2289:5]
        [ident] -> s [2295:1]
        [ident] -> defOp [2297:5]
        [ast] -> ^expr [2303:5]
          [ident] -> expr [2304:4]

  [def] -> prd = color( (^ident s prdOp ^expr), "Yellow", "Blue" ) [2310:55]
    [ident] -> prd [2310:3]
    [expr] -> color( (^ident s prdOp ^expr), "Yellow", "Blue" ) [2316:49]
      [func] -> color( (^ident s prdOp ^expr), "Yellow", "Blue" ) [2316:49]
        [funcName] -> color [2316:5]
        [sequence] -> ^ident s prdOp ^expr [2324:20]
          [ast] -> ^ident  [2324:7]
            [ident] -> ident [2325:5]
          [ident] -> s [2331:1]
          [ident] -> prdOp [2333:5]
          [ast] -> ^expr [2339:5]
            [ident] -> expr [2340:4]
        [argList] -> "Yellow", "Blue"  [2347:17]
          [str] -> Yellow [2348:6]
          [str] -> Blue [2358:4]

  [lineComment] -> // a statement is either a symbol or an AST definition, followed by an end-of-statement  [2369:90]

  [def] -> statement = (^def | ^prd) eos [2459:29]
    [ident] -> statement [2459:9]
    [expr] -> (^def | ^prd) eos [2471:17]
      [sequence] -> (^def | ^prd) eos [2471:17]
        [choice] -> ^def | ^prd [2472:11]
          [ast] -> ^def  [2472:5]
            [ident] -> def [2473:3]
          [ast] -> ^prd [2479:4]
            [ident] -> prd [2480:3]
        [ident] -> eos [2485:3]

  [lineComment] -> // start rule [2492:15]

  [def] -> start = (ws statement)* ws !. [2507:29]
    [ident] -> start [2507:5]
    [expr] -> (ws statement)* ws !. [2515:21]
      [sequence] -> (ws statement)* ws !. [2515:21]
        [zpl] -> (ws statement)*  [2515:16]
          [sequence] -> ws statement [2516:12]
            [ident] -> ws [2516:2]
            [ident] -> statement [2519:9]
        [ident] -> ws [2531:2]
        [not] -> !. [2534:2]
          [anyChar] -> . [2535:1]

